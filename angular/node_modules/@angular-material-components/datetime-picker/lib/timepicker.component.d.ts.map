{"version":3,"file":"timepicker.component.d.ts","sources":["timepicker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nexport declare class NgxMatTimepickerComponent<D> implements ControlValueAccessor, OnInit, OnChanges {\r\n    _dateAdapter: NgxMatDateAdapter<D>;\r\n    private cd;\r\n    private formBuilder;\r\n    form: FormGroup;\r\n    disabled: boolean;\r\n    showSpinners: boolean;\r\n    stepHour: number;\r\n    stepMinute: number;\r\n    stepSecond: number;\r\n    showSeconds: boolean;\r\n    disableMinute: boolean;\r\n    enableMeridian: boolean;\r\n    defaultTime: number[];\r\n    color: ThemePalette;\r\n    meridian: string;\r\n    /** Hour */\r\n    private get hour();\r\n    private get minute();\r\n    private get second();\r\n    /** Whether or not the form is valid */\r\n    get valid(): boolean;\r\n    private _onChange;\r\n    private _onTouched;\r\n    private _disabled;\r\n    private _model;\r\n    private _destroyed;\r\n    pattern: RegExp;\r\n    constructor(_dateAdapter: NgxMatDateAdapter<D>, cd: ChangeDetectorRef, formBuilder: FormBuilder);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Writes a new value to the element.\r\n     * @param obj\r\n     */\r\n    writeValue(val: D): void;\r\n    /** Registers a callback function that is called when the control's value changes in the UI. */\r\n    registerOnChange(fn: (_: any) => {}): void;\r\n    /**\r\n     * Set the function to be called when the control receives a touch event.\r\n     */\r\n    registerOnTouched(fn: () => {}): void;\r\n    /** Enables or disables the appropriate DOM element */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    /**\r\n     * Format input\r\n     * @param input\r\n     */\r\n    formatInput(input: HTMLInputElement): void;\r\n    /** Toggle meridian */\r\n    toggleMeridian(): void;\r\n    /** Change property of time */\r\n    change(prop: string, up?: boolean): void;\r\n    /** Update controls of form by model */\r\n    private _updateHourMinuteSecond;\r\n    /** Update model */\r\n    private _updateModel;\r\n    /**\r\n     * Get next value by property\r\n     * @param prop\r\n     * @param up\r\n     */\r\n    private _getNextValueByProp;\r\n}\r\n"]}