{"version":3,"file":"datetime-input.d.ts","sources":["datetime-input.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ElementRef, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats } from './core/date-formats';\r\nimport { NgxMatDatetimePicker } from './datetime-picker.component';\r\n/** @docs-private */\r\nexport declare const MAT_DATEPICKER_VALUE_ACCESSOR: any;\r\n/** @docs-private */\r\nexport declare const MAT_DATEPICKER_VALIDATORS: any;\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatetimePickerInputEvent instead.\r\n */\r\nexport declare class MatDatetimePickerInputEvent<D> {\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    target: NgxMatDatetimeInput<D>;\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    targetElement: HTMLElement;\r\n    /** The new value for the target datepicker input. */\r\n    value: D | null;\r\n    constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    target: NgxMatDatetimeInput<D>, \r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    targetElement: HTMLElement);\r\n}\r\n/** Directive used to connect an input to a matDatetimePicker. */\r\nexport declare class NgxMatDatetimeInput<D> implements ControlValueAccessor, OnDestroy, Validator {\r\n    private _elementRef;\r\n    _dateAdapter: NgxMatDateAdapter<D>;\r\n    private _dateFormats;\r\n    private _formField;\r\n    /** The datepicker that this input is associated with. */\r\n    set ngxMatDatetimePicker(value: NgxMatDatetimePicker<D>);\r\n    _datepicker: NgxMatDatetimePicker<D>;\r\n    /** Function that can be used to filter out dates within the datepicker. */\r\n    set ngxMatDatetimePickerFilter(value: (date: D | null) => boolean);\r\n    _dateFilter: (date: D | null) => boolean;\r\n    /** The value of the input. */\r\n    get value(): D | null;\r\n    set value(value: D | null);\r\n    private _value;\r\n    /** The minimum valid date. */\r\n    get min(): D | null;\r\n    set min(value: D | null);\r\n    private _min;\r\n    /** The maximum valid date. */\r\n    get max(): D | null;\r\n    set max(value: D | null);\r\n    private _max;\r\n    /** Whether the datepicker-input is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /** Emits when a `change` event is fired on this `<input>`. */\r\n    readonly dateChange: EventEmitter<MatDatetimePickerInputEvent<D>>;\r\n    /** Emits when an `input` event is fired on this `<input>`. */\r\n    readonly dateInput: EventEmitter<MatDatetimePickerInputEvent<D>>;\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    _valueChange: EventEmitter<D>;\r\n    /** Emits when the disabled state has changed */\r\n    _stateChanges: EventEmitter<void>;\r\n    _onTouched: () => void;\r\n    private _cvaOnChange;\r\n    private _validatorOnChange;\r\n    private _datepickerSubscription;\r\n    private _localeSubscription;\r\n    /** The form control validator for whether the input parses. */\r\n    private _parseValidator;\r\n    /** The form control validator for the min date. */\r\n    private _minValidator;\r\n    /** The form control validator for the max date. */\r\n    private _maxValidator;\r\n    /** The form control validator for the date filter. */\r\n    private _filterValidator;\r\n    /** The combined form control validator for this input. */\r\n    private _validator;\r\n    /** Whether the last value set on the input was valid. */\r\n    private _lastValueValid;\r\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _dateAdapter: NgxMatDateAdapter<D>, _dateFormats: NgxMatDateFormats, _formField: MatFormField);\r\n    ngOnDestroy(): void;\r\n    /** @docs-private */\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    /** @docs-private */\r\n    validate(c: AbstractControl): ValidationErrors | null;\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     */\r\n    getPopupConnectionElementRef(): ElementRef;\r\n    /**\r\n     * Gets the element that the datepicker popup should be connected to.\r\n     * @return The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin(): ElementRef;\r\n    writeValue(value: D): void;\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    _onKeydown(event: KeyboardEvent): void;\r\n    _onInput(value: string): void;\r\n    _onChange(): void;\r\n    /** Returns the palette used by the input's form field, if any. */\r\n    _getThemePalette(): ThemePalette;\r\n    /** Handles blur events on the input. */\r\n    _onBlur(): void;\r\n    /** Handles focus events on the input. */\r\n    _onFocus(): void;\r\n    /** Formats a value and sets it on the input element. */\r\n    private _formatValue;\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull;\r\n}\r\n"]}